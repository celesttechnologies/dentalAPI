## Autogenerated by Scribe. DO NOT MODIFY.

name: FeedbackQuestion
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/feedback/question
    metadata:
      groupName: FeedbackQuestion
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              {
                  "data": {
                      "feedback_questions": [
                          {
                              "id": 1,
                              "question": "Example value",
                              "question_type": "Example value",
                              "question_type_description": "Example value",
                              "created_by": "Example value",
                              "created_date": "Example value",
                              "updated_by": "Example value",
                              "updated_date": "Example value",
                              "is_deleted": true
                          }
                      ],
                      "pagination": {
                          "current_page": 1,
                          "per_pages": 50,
                          "total": 100
                      }
                  }
              }
          }
        headers: []
        description: Success
        custom: []
      -
        status: 500
        content: '{"message": "Internal server error"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/feedback/question
    metadata:
      groupName: FeedbackQuestion
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      Question:
        name: Question
        description: required.
        required: false
        example: '"Example Question"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      QuestionType:
        name: QuestionType
        description: required.
        required: false
        example: '"Example QuestionType"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      QuestionTypeDescription:
        name: QuestionTypeDescription
        description: required.
        required: false
        example: '"Example QuestionTypeDescription"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      CreatedBy:
        name: CreatedBy
        description: required.
        required: false
        example: '"Example CreatedBy"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      CreatedDate:
        name: CreatedDate
        description: 'required. date.'
        required: false
        example: '"Example CreatedDate"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      UpdatedBy:
        name: UpdatedBy
        description: 'required. date.'
        required: false
        example: '"Example UpdatedBy"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      UpdatedDate:
        name: UpdatedDate
        description: 'required. date.'
        required: false
        example: '"Example UpdatedDate"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      IsDeleted:
        name: IsDeleted
        description: required.
        required: false
        example: '"Example IsDeleted"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      Question: '"Example Question"'
      QuestionType: '"Example QuestionType"'
      QuestionTypeDescription: '"Example QuestionTypeDescription"'
      CreatedBy: '"Example CreatedBy"'
      CreatedDate: '"Example CreatedDate"'
      UpdatedBy: '"Example UpdatedBy"'
      UpdatedDate: '"Example UpdatedDate"'
      IsDeleted: '"Example IsDeleted"'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
              {
                  "data": {
                      "question": {
                          "id": 1,
                          "question": "Example value",
                          "question_type": "Example value",
                          "question_type_description": "Example value",
                          "created_by": "Example value",
                          "created_date": "Example value",
                          "updated_by": "Example value",
                          "updated_date": "Example value",
                          "is_deleted": true
                      }
                  }
              }
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: '{"message": "Validation error", "errors": {"field": ["Error message"]}}'
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: '{"message": "Internal server error"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/feedback/question/{feedbackQuestion_Id}'
    metadata:
      groupName: FeedbackQuestion
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      feedbackQuestion_Id:
        name: feedbackQuestion_Id
        description: ''
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'required. The ID of the feedbackquestion to update.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      feedbackQuestion_Id: 16
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      Question:
        name: Question
        description: optional.
        required: false
        example: '"Example Question"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      QuestionType:
        name: QuestionType
        description: optional.
        required: false
        example: '"Example QuestionType"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      QuestionTypeDescription:
        name: QuestionTypeDescription
        description: optional.
        required: false
        example: '"Example QuestionTypeDescription"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      CreatedBy:
        name: CreatedBy
        description: optional.
        required: false
        example: '"Example CreatedBy"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      CreatedDate:
        name: CreatedDate
        description: 'optional. date.'
        required: false
        example: '"Example CreatedDate"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      UpdatedBy:
        name: UpdatedBy
        description: 'optional. date.'
        required: false
        example: '"Example UpdatedBy"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      UpdatedDate:
        name: UpdatedDate
        description: 'optional. date.'
        required: false
        example: '"Example UpdatedDate"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      IsDeleted:
        name: IsDeleted
        description: optional.
        required: false
        example: '"Example IsDeleted"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      Question: '"Example Question"'
      QuestionType: '"Example QuestionType"'
      QuestionTypeDescription: '"Example QuestionTypeDescription"'
      CreatedBy: '"Example CreatedBy"'
      CreatedDate: '"Example CreatedDate"'
      UpdatedBy: '"Example UpdatedBy"'
      UpdatedDate: '"Example UpdatedDate"'
      IsDeleted: '"Example IsDeleted"'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              {
                  "data": {
                      "question": {
                          "id": 1,
                          "question": "Example value",
                          "question_type": "Example value",
                          "question_type_description": "Example value",
                          "created_by": "Example value",
                          "created_date": "Example value",
                          "updated_by": "Example value",
                          "updated_date": "Example value",
                          "is_deleted": true
                      }
                  }
              }
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: '{"message": "Validation error", "errors": {"field": ["Error message"]}}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "Resource not found"}'
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: '{"message": "Internal server error"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
